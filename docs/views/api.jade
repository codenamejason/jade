extends ./layout.jade

block content
  h1 {{api-title}}

  p {{api-intro}}

  h2 {{installation}}

  p {{using-npm}}

  pre
    code npm install jade

  h2 {{usage}}

  h3 {{options}}

  p {{all-api-methods}}

  .code
    div {
    dl.parameter-list
      dt filename:
      dd.type.string string
      dd.description {{filename-description}}
      dt doctype:
      dd.type.string string
      dd.description {{doctype-description}}
      dt pretty:
      dd.type.boolean boolean|string
      dd.description {{pretty-description}}
      dt self:
      dd.type.boolean boolean
      dd.description {{self-description}}
      dt debug:
      dd.type.boolean boolean
      dd.description {{debug-description}}
      dt compileDebug:
      dd.type.boolean boolean
      dd.description {{compile-debug-description}}
      dt compiler:
      dd.type.function class
      dd.description {{compiler-description}}
      dt globals:
      dd.type.array array
      dd.description {{globals-description}}
    div }

  h3 jade.compile({{source}}, {{options}})

  p {{compile-description}}

  dl.parameter-list
    dt source
    dd.type.string string
    dd.description {{source-param-description}}
    dt {{options}}
    dd.type.object {{options}}
    dd.description {{options-param-description}}
  dl.returns
    dt returns
    dd.type.function function
    dd.description {{a-function-to-generate-html}}

  +js
    :jssrc
      var jade = require('jade');

      // {{compile-function}}
      var fn = jade.compile('string of jade', options);

      // {{render-to-html}}
      var html = fn(locals);
      // => '<string>of jade</string>'

  h3 jade.compileFile({{filename}}, {{options}})

  p {{compile-file-description}}

  dl.parameter-list
    dt {{filename}}
    dd.type.string path
    dd.description {{filename-param-description}}
    dt {{options}}
    dd.type.object {{options}}
    dd.description {{options-param-description}}
  dl.returns
    dt returns
    dd.type.function function
    dd.description {{a-function-to-generate-html}}

  +js
    :jssrc
      var jade = require('jade');

      // {{compile-function}}
      var fn = jade.compileFile('path to jade file', {{options}});

      // {{render-to-html}}
      var html = fn(locals);
      // => '<string>of jade</string>'

  h3 jade.compileClient({{source}}, {{options}})

  p {{compile-client-description}}

  dl.parameter-list
    dt {{source}}
    dd.type.string string
    dd.description {{source-param-description}}
    dt {{options}}
    dd.type.object {{options}}
    dd.description {{options-param-description}}
  dl.returns
    dt returns
    dd.type.string string
    dd.description A string of JavaScript representing a function

  +js
    :jssrc
      var jade = require('jade');

      // {{compile-function}}
      var src = jade.compileClient('string of jade', {{options}});
      // => 'function template(locals) { return "<string>of jade</string>"; }'

  h3 jade.render({{source}}, {{options}})

  dl.parameter-list
    dt {{source}}
    dd.type.string string
    dd.description {{source-param-description}}
    dt {{options}}
    dd.type.object {{options}}
    dd.description {{options-and-locals-param-description}}
  dl.returns
    dt returns
    dd.type.string string
    dd.description {{resulting-html}}

  +js
    :jssrc
      var jade = require('jade');

      var html = jade.render('string of jade', options);
      // => '<string>of jade</string>'

  h3 jade.renderFile({{filename}}, {{options}})

  dl.parameter-list
    dt {{filename}}
    dd.type.string string
    dd.description {{filename-param-description}}
    dt {{options}}
    dd.type.object {{options}}
    dd.description {{options-and-locals-param-description}}
  dl.returns
    dt returns
    dd.type.string string
    dd.description {{resulting-html}}

  +js
    :jssrc
      var jade = require('jade');

      var html = jade.renderFile('path/to/file.jade', options);
      // ...
